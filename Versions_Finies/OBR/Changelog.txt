0.1 :
- Première version, non fonctionnelle
- Création du protocole de communication OBR1

0.2 :
- Création du protocole de communication OBR2
- Mise en place du système de question/réponse, sous forme de commande de type OBR_COMMANDE-PARAMETRE1-PARAMETRE2-PARAMETRE3
- Ajout du mode administrateur
- Ajout des modes configuration et pilotage
- Première version du calcul du niveau de batterie
- Passage du port série en 57600 bauds
- Ajout du mot de passe, et son système de réinitialisation à "2560"

0.3 :
- Utilisation du protocole de communication OBR3
- Ajout du système d'authentification sur les ports série
- Ajout de la prise en charge des cartes d'extension (jusqu'à deux cartes d'extensions) via RS232 (Mais les cartes seront inactives, sauf pour demander la liste des connexions externes)
- Ajout du mapage réseau, permettant de relier le PC, télécommande et les cartes d'extensions sur n'importe quel port série (de n'importe quelle carte d'extension)
- Ajout du système d'adresse dans les commandes, permettant le routage des données à travers les cartes ([1|2]OBR_...)
- Ajout des constantes de compilation pour définir le nom du robot, et son rôle (maitre/esclave), ainsi que le type (MEGA, UNO...)
- Ajout de la détection de déconnexion série, et déconnexion auto de l'administrateur

0.4 :
- Ajout des fonctions de gestion des E/S dans le noyau
- prise en compte des limites imposées dans les sorties PWM
- Mise à jour auto des valeurs des E/S
- Réorganisation du code et séparration des fonctions du noyau, des autres fonctions
- Ajout de deux fonctions (user_setup et user_loop) modifiable par l'utilisateur

0.5 :
- Mise en place des codes d'erreur dans le noyau du système
- Mise en place des fonctions de copie RAM->EEPROM et EEPROM->RAM, contenant les données de fonctionnement (liste des moteurs, capteurs...)
- Ajout des fonctions de mise en place des périphériques (moteurs, capteurs...)
- Sauvegarde des PIN E/S pour les restaurer au boot
- Ajout d'une commande de redémarrage du système
- Ajout de toutes les commandes de pilotage

0.6 :
- Redémarrage d'un moteur en douceur après un arrêt brutal (Lien qui bloque le moteur d'un coup)
- Suppression du système de bloquage de la carte, remplacé par un redémarrage complet du système
- La remise à 0 du mot de passe ne bloque plus l'arduino
- Changement de la gestion des commandes, chaque commande enregistre sa réponse et le système la retourne à la fin des commandes (permet de dire quand une commande est inconnue)
- Séparation des commandes de pilotage et de configuration
- Ajout de la gestion des liens, au sein d'une carte
- L'état de l'activation du watchdog est enregistré en EEPROM, et est restauré au démarrage
- Renommage des fonctions du noyau

0.7 :
- Changement de la gestion des numéro de PWM : maintenant on envoie son n° de PIN (et non plus n°PWM) en paramètre
- La liaison entre le PIN 12 et 13 au démarrage réinitialise le mot de passe, mais aussi toutes les configurations
- WatchDog plus intelligent, évite la surcharge du réseau lorsque ça discute
- Correction du BUG qui laisse la LED 13 allumée quand on la déconnecte
- Deconnexion de l'administrateur lors du pilotage

0.8 :
- Utilisation de F() pour économiser de la RAM, sur les String des différentes commandes
- Correction de Bugs empêchant la connexion entre deux arduino
- Refonte totale de la gestion des connexions entre les cartes
- Passage partielle au protocole OBR4
- Utilisation de la bibliothèque <Servo.h>
- Deconnexion automatique des PWM connectés sur les PIN vérouillés par la bibliothèque <Servo.h>
- Arret complet des moteurs lors de la déconnexion (Valeur_Voulue mis à 0, sauf pour les servomoteurs)
- Ajout d'identifiants devant la commande pour connaître le type de message (réponse, commande, watchdog...)
- Ajout de la valeur à 0 pour une sortie (peut être 0 ou 1)
- Watchdog non désactivable

0.9 :
- Gestion centralisée par le maitre, on peut configurer une E/S d'une autre carte, en passant par le maître
- Mise en place des liens entre toutes les cartes
- Doublage du nombre de liens (passage à 2 liens Analogique et 6 liens numériques)
- Ajout d'une commande de création de pont entre deux ports séries, pour les cartes le permettant
- Utilisation complète de l'OBR4, complètement incompatible avec OBR3
- Possiblitée de passer les ports séries en 115200 ou 9600 bauds (un reset les remet en 57600b)
- Création d'un objet "moteur à double sens" qui comprend un n°de PIN moteur + un numéro de PIN sens (en plus des MIN et MAX, valeur à 0...) et suppression des moteurs simples (N° PIN sens = 255)
- Ajout d'un système de gestion de pilotes, permettant de connecter des modules (ex : un pilote pour la transmission/reception via un module Wifi)

1.0 :
- Première version finale
- Gestion du multi-pilote pour une même chose (ex : liaison série en wifi ET en bluetooth)
- Compression des fonctions, et optimisation du code
- Gestion autonome en cas de coupure entre deux cartes (les liens rompus bloquent l'activation des sorties concernées)
- Gestion améliorée de la batterie (& commande suplémentaire pour gérer la batterie)
- Contient toutes les commandes de pilotage
- Contient toutes les commandes de configuration
- Utilise le protocole OBR4, non compatible OBR3 (utilisé jusqu'à la v0.7)
- Le système de WatchDog des connexions séries est fonctionnel
- On peut brancher et débrancher une carte du réseau à chaud
- On peut connecter une télécommande OBRoC sans problème
- Entierement compatible avec TeC'OBiR 1.5 et superieur
